[
  {
    "objectID": "slides/01-intro/01-intro.html#apresentação",
    "href": "slides/01-intro/01-intro.html#apresentação",
    "title": "Introdução",
    "section": "Apresentação",
    "text": "Apresentação\n\nProf. Bruno Silva\nAtendimento:\n\nVia email: bruno.silva@ect.ufrn.br\nVia Discord\nHorário para a turma: terças e quintas, das 16:40 às 17:40\n\nÁreas de interesse:\n\nProcessamento de imagens e visão computacional\nInteligência artificial e robótica"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#por-que-poo",
    "href": "slides/01-intro/01-intro.html#por-que-poo",
    "title": "Introdução",
    "section": "Por que POO?",
    "text": "Por que POO?\n\nQual a importância de POO para um desenvolvedor?\nEla constitui realmente uma ferramenta importante?\n\n\nSão estas as duas perguntas que cada um de vocês deverá responder ao final do semestre"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#objetivos",
    "href": "slides/01-intro/01-intro.html#objetivos",
    "title": "Introdução",
    "section": "Objetivos",
    "text": "Objetivos\nO objetivo do curso é fazer com que os estudantes sejam capazes de:\n\nIdentificar os conceitos fundamentais do paradigma de programação orientado a objetos (POO)\nUtilizar apropriadamente as técnicas de modelagem e programação orientadas a objeto\nDesenvolver aplicações utilizando o paradigma de POO"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#ferramentas",
    "href": "slides/01-intro/01-intro.html#ferramentas",
    "title": "Introdução",
    "section": "Ferramentas",
    "text": "Ferramentas\nLinguagem\n\nÊnfase da disciplina: teoria de POO\nEntretanto: é necessário escolher uma linguagem para colocar os conceitos em prática\nLinguagem escolhida:\n\n\nPython"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#ferramentas-1",
    "href": "slides/01-intro/01-intro.html#ferramentas-1",
    "title": "Introdução",
    "section": "Ferramentas",
    "text": "Ferramentas\nLinguagem Python\n\nLinguagem multi paradigmas\nSuporta o paradigma de POO\nLinguagem de fácil aprendizado"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#ferramentas-2",
    "href": "slides/01-intro/01-intro.html#ferramentas-2",
    "title": "Introdução",
    "section": "Ferramentas",
    "text": "Ferramentas\n\nPython 3.X\nIDES:\n\nMais simples: Sublime/ Atom\nMais completas: Visual Studio Code/ PyCharm\n\nJupyter Notebooks"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#ferramentas-3",
    "href": "slides/01-intro/01-intro.html#ferramentas-3",
    "title": "Introdução",
    "section": "Ferramentas",
    "text": "Ferramentas\n\nAulas\n\nPrimeiras 2 aulas da semana: teoria\nÚltimas 2 aulas da semana: prática\n\nDiscord\n\nLaboratório virtual: alunos são encorajados a se reunirem em canais de áudio\nPerguntas podem ser feitas ao professor ou a todos da turma"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#ementa-da-disciplina",
    "href": "slides/01-intro/01-intro.html#ementa-da-disciplina",
    "title": "Introdução",
    "section": "Ementa da Disciplina",
    "text": "Ementa da Disciplina\nPilares fundamentais:\n\nAbstração\nEncapsulamento\nHerança\nPolimorfismo\n\nConceitos de Programação:\n\nErros e exceções\nEstruturas de dados (listas, dicionários, etc)"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#ementa-da-disciplina-1",
    "href": "slides/01-intro/01-intro.html#ementa-da-disciplina-1",
    "title": "Introdução",
    "section": "Ementa da Disciplina",
    "text": "Ementa da Disciplina\nTodas as aulas programadas estão cadastradas no SIGAA"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#avaliação",
    "href": "slides/01-intro/01-intro.html#avaliação",
    "title": "Introdução",
    "section": "Avaliação",
    "text": "Avaliação\n\nUnidades I e II:\n\nTarefas (40%)\nProva (60%)\n\nUnidade III:\n\nTarefas (20%)\nProjeto (80%)"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#material-bibliográfico",
    "href": "slides/01-intro/01-intro.html#material-bibliográfico",
    "title": "Introdução",
    "section": "Material bibliográfico",
    "text": "Material bibliográfico\n\nLivros online:\n\nHow to Think Like a Computer Scientist\nObject-Oriented Programming in Python\nA Byte of Python\n\nTutoriais:\n\nDocumentação de Python\nReal Python"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#material-bibliográfico-1",
    "href": "slides/01-intro/01-intro.html#material-bibliográfico-1",
    "title": "Introdução",
    "section": "Material bibliográfico",
    "text": "Material bibliográfico\n\nLivros:\n\nLearning Python\nPython 3 Object Oriented Programming"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#material-bibliográfico-2",
    "href": "slides/01-intro/01-intro.html#material-bibliográfico-2",
    "title": "Introdução",
    "section": "Material bibliográfico",
    "text": "Material bibliográfico\n\nCursos online:\n\nPython OOP : Four Pillars of OOP in Python 3 for Beginners\n\nApostilas:\n\nCaelum"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#comparação-com-lip",
    "href": "slides/01-intro/01-intro.html#comparação-com-lip",
    "title": "Introdução",
    "section": "Comparação com LIP",
    "text": "Comparação com LIP\n\nAssume-se que você domina os conceitos fundamentais de LiP (variáveis, estruturas de controle e funções).\nPOO envolve consideravelmente mais teoria do que LiP\nPOO exige também mais proatividade por parte do aluno"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#sejam-bem-vindos",
    "href": "slides/01-intro/01-intro.html#sejam-bem-vindos",
    "title": "Introdução",
    "section": "Sejam bem-vindos!",
    "text": "Sejam bem-vindos!\nTarefa - instalar a distribuição Anaconda:\n\nWindows\nLinux\n\nEm seguida, verifique se o terminal Python está funcionando no seu computador\n\n\n\nECT2504 - Programação Orientada a Objetos"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#objetivos",
    "href": "slides/02-python-basico/02-python-basico.html#objetivos",
    "title": "Python Básico",
    "section": "Objetivos",
    "text": "Objetivos\nO objetivo da aula é introduzir comandos básicos em Python:\n\nTerminal interativo de comandos\nVariáveis e tipos\nOperadores e expressões\nEntrada e saída\nControle de fluxo (if, while, for)"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#a-linguagem-python",
    "href": "slides/02-python-basico/02-python-basico.html#a-linguagem-python",
    "title": "Python Básico",
    "section": "A Linguagem Python",
    "text": "A Linguagem Python\n\nCriada no início dos anos 90\nAplicações:\n\nLinguagem de script (auxiliar)\nAplicações das grandes indústrias (Google, Dropbox, Intel, Netflix, etc.)\nAplicações científicas (NASA, Robot Operating System, etc.)\nBibliotecas de IA: Deep learning (PyTorch, TensorFlow, etc.) —"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#a-linguagem-python-1",
    "href": "slides/02-python-basico/02-python-basico.html#a-linguagem-python-1",
    "title": "Python Básico",
    "section": "A Linguagem Python",
    "text": "A Linguagem Python\nPor que Python?\n\nSimplicidade\nFacilidade de aprendizado e de correção de erros\nCódigo limpo\nCódigo multiplataforma (Linux/Mac/Windows)\nSuporta o paradigma de programação orientada a objetos"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#a-linguagem-python-2",
    "href": "slides/02-python-basico/02-python-basico.html#a-linguagem-python-2",
    "title": "Python Básico",
    "section": "A Linguagem Python",
    "text": "A Linguagem Python\n\nÉ uma linguagem interpretada\nSuporta um terminal de comandos interativo\n\nQualquer comando da linguagem pode ser executado\n\nAgiliza a programação\nFacilita a depuração de erros"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#a-linguagem-python-3",
    "href": "slides/02-python-basico/02-python-basico.html#a-linguagem-python-3",
    "title": "Python Básico",
    "section": "A Linguagem Python",
    "text": "A Linguagem Python\nInstalação (Windows e Linux):\n\nBaixar a distribuição Anaconda para Python\n\nWindows\nLinux\n\nInstalar a distribuição\nExecutar terminal Python"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#terminal-de-comandos-interativo",
    "href": "slides/02-python-basico/02-python-basico.html#terminal-de-comandos-interativo",
    "title": "Python Básico",
    "section": "Terminal de Comandos Interativo",
    "text": "Terminal de Comandos Interativo"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#editando-arquivos-.py",
    "href": "slides/02-python-basico/02-python-basico.html#editando-arquivos-.py",
    "title": "Python Básico",
    "section": "Editando Arquivos .py",
    "text": "Editando Arquivos .py"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#jupyter-notebook",
    "href": "slides/02-python-basico/02-python-basico.html#jupyter-notebook",
    "title": "Python Básico",
    "section": "Jupyter Notebook",
    "text": "Jupyter Notebook"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#zen-do-python",
    "href": "slides/02-python-basico/02-python-basico.html#zen-do-python",
    "title": "Python Básico",
    "section": "Zen do python",
    "text": "Zen do python\nimport this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nReadability counts.\nIf the implementation is hard to explain, it's a bad idea."
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c",
    "href": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c",
    "title": "Python Básico",
    "section": "Diferenças de Python para C++",
    "text": "Diferenças de Python para C++\n\nTipos das variáveis determinados automaticamente:\n\n x = 4 \n type(x) # int\n s = \"alo\"\n type(s) # str"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c-1",
    "href": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c-1",
    "title": "Python Básico",
    "section": "Diferenças de Python para C++",
    "text": "Diferenças de Python para C++\n\nIndentação obrigatória:\n\nif x % 2 == 0:\n    cont_par += 1 # Código indentado\nelse:\n    cont_impar += 1 # Código indentado"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c-2",
    "href": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c-2",
    "title": "Python Básico",
    "section": "Diferenças de Python para C++",
    "text": "Diferenças de Python para C++\n\n; não é necessário\n\n i = 5\n i +=1\n print(i)"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c-3",
    "href": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c-3",
    "title": "Python Básico",
    "section": "Diferenças de Python para C++",
    "text": "Diferenças de Python para C++\n\nLaços for:\n\nC++:\n\nfor(int i=0; i < n; i++){\n  cout << i << endl;\n}\n\nPython:\n\nfor i in range(0,n): # até n-1\n  print(i)"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c-4",
    "href": "slides/02-python-basico/02-python-basico.html#diferenças-de-python-para-c-4",
    "title": "Python Básico",
    "section": "Diferenças de Python para C++",
    "text": "Diferenças de Python para C++\n\nErros que não sejam de sintaxe só são reconhecidos se o código for executado\n\nx = 50\ny = 100\n\nif x % 2 == 0:\n    print('x é par')\n    print(y)\nelse:\n    print('x não é par')\n    print(z) # z não foi declarado"
  },
  {
    "objectID": "slides/02-python-basico/02-python-basico.html#jupyter-notebook-1",
    "href": "slides/02-python-basico/02-python-basico.html#jupyter-notebook-1",
    "title": "Python Básico",
    "section": "Jupyter Notebook",
    "text": "Jupyter Notebook\nRoteiro com comandos básicos Python e exercícios:\n02-Python-Basico\n\n\n\nECT2504 - Programação Orientada a Objetos"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#objetivos",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#objetivos",
    "title": "Classes, Objetos e Abstração",
    "section": "Objetivos",
    "text": "Objetivos\nIntroduzir os conceitos de:\n\nClasse em POO\nAtributos, métodos e construtores em uma classe"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#classes-e-abstrações",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#classes-e-abstrações",
    "title": "Classes, Objetos e Abstração",
    "section": "Classes e Abstrações",
    "text": "Classes e Abstrações\nConsidere um carro:\n\nQuais são as características de um carro?\nQue coisas um carro pode “fazer”?\nTodos os carros alcançam a mesma velocidade?\n\n\n\nFoto: Revista carro"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#programação-orientada-a-objetos",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#programação-orientada-a-objetos",
    "title": "Classes, Objetos e Abstração",
    "section": "Programação Orientada a Objetos",
    "text": "Programação Orientada a Objetos\nEnvolve implementar programas que possuem objetos interagindo entre si:\n\nDiferentemente de programação estruturada onde funções/comandos interagem entre si"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#programação-orientada-a-objetos-1",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#programação-orientada-a-objetos-1",
    "title": "Classes, Objetos e Abstração",
    "section": "Programação Orientada a Objetos",
    "text": "Programação Orientada a Objetos\nQualquer coisa pode ser um objeto:\n\n“Coisas” do mundo real (carro, casa, avião, animal, etc.)\nGrandezas matemáticas (vetor, matriz, polinômio, etc.)\nAbstrações no contexto de um problema (gerenciador de banco de dados, fábrica de personagens, turma, música, etc.)"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#classes",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#classes",
    "title": "Classes, Objetos e Abstração",
    "section": "Classes",
    "text": "Classes\n\nSão abstrações para agrupar objetos que têm um comportamento comum\nDescrevem de maneira abstrata o comportamento dos objetos\nÉ uma especificação para objetos daquela classe, similar a uma planta baixa"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#classes-1",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#classes-1",
    "title": "Classes, Objetos e Abstração",
    "section": "Classes",
    "text": "Classes\n\n\n\n\n\n\nA palavra classe vem da taxonomia da biologia. Todos os seres vivos de uma mesma classe biológica têm uma série de atributos e comportamentos em comum, mas eles não são iguais, podem variar nos valores desses atributos e como realizam esses comportamentos."
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#objetos",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#objetos",
    "title": "Classes, Objetos e Abstração",
    "section": "Objetos",
    "text": "Objetos\n\nSão instâncias de uma classe\n\nUm Chevrolet Onix é uma instância da classe Carro\n\nEncapsulam (armazenam e protegem) um estado:\n\nConjunto de valores que os atributos possuem\nPor exemplo, uma instância da classe Carro pode ter potência igual a 90, marca Chevrolet, etc."
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#objetos-1",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#objetos-1",
    "title": "Classes, Objetos e Abstração",
    "section": "Objetos",
    "text": "Objetos\n\nPossuem um comportamento definido através dos seus métodos\n\nMétodos são funções executadas por um objeto\nA chamada de um método executa uma ação no programa"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#atributo-e-estado",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#atributo-e-estado",
    "title": "Classes, Objetos e Abstração",
    "section": "Atributo e Estado",
    "text": "Atributo e Estado\nO estado de um objeto está definido pelos valores dos seus atributos\nOs tipos dos atributos podem ser:\n\nTipos que a linguagem fornece: int, float, str, etc.\nOutras classes"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#atributo-e-estado-1",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#atributo-e-estado-1",
    "title": "Classes, Objetos e Abstração",
    "section": "Atributo e Estado",
    "text": "Atributo e Estado\nO estado de um objeto é definido pelos valores dos seus atributos:\n\n\n\n\nClass Carro:\n // Atributos\n  - marca\n  - potencia"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#tipos-estruturados-vs-poo",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#tipos-estruturados-vs-poo",
    "title": "Classes, Objetos e Abstração",
    "section": "Tipos Estruturados vs POO",
    "text": "Tipos Estruturados vs POO\nConsidere a classe Circulo:\n\nQuais são as características de um círculo ?\n\nO tipo estruturado de C++ representa um círculo:\nstruct Circulo{\n    double x,y; // Coordenadas do centro\n    double raio; //Raio\n };"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#tipos-estruturados-vs-poo-1",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#tipos-estruturados-vs-poo-1",
    "title": "Classes, Objetos e Abstração",
    "section": "Tipos Estruturados vs POO",
    "text": "Tipos Estruturados vs POO\nEntretanto, o tipo Circulo definido como struct:\n\nÉ utilizado apenas para armazenar dados\nNão tem um comportamento definido\n\nClasses complementam tipos estruturados com comportamento"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#classes-em-python",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#classes-em-python",
    "title": "Classes, Objetos e Abstração",
    "section": "Classes em Python",
    "text": "Classes em Python\nEm Python, tudo é um objeto:\n>>> type(5)\n< class 'int' >\n>>> type(\"alo\")\n< class 'str' >\n\n\n\n\n\n\nVariáveis possuem tipos == objetos possuem classes"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#programação-orientada-a-objetos-2",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#programação-orientada-a-objetos-2",
    "title": "Classes, Objetos e Abstração",
    "section": "Programação Orientada a Objetos",
    "text": "Programação Orientada a Objetos\nProgramar orientado a objetos envolve:\n\nIdentificar classes que agrupam objetos com um comportamento comum\nIdentificar os atributos que cada objeto deve armazenar\nIdentificar como os objetos devem se comportar\nIdentificar como os objetos do sistema devem interagir entre si"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#programação-orientada-a-objetos-3",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#programação-orientada-a-objetos-3",
    "title": "Classes, Objetos e Abstração",
    "section": "Programação Orientada a Objetos",
    "text": "Programação Orientada a Objetos\n\n\n\nSe eu identifiquei que classes (objetos) o meu programa deve ter, como saber que atributos e métodos estas classes devem ter?"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#primeiro-pilar-de-poo-abstração",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#primeiro-pilar-de-poo-abstração",
    "title": "Classes, Objetos e Abstração",
    "section": "Primeiro pilar de POO: Abstração",
    "text": "Primeiro pilar de POO: Abstração\nAbstração: escolher os aspetos mais relevantes para as classes/objetos a serem implementados\n\nSimplicidade: atributos irrelevantes devem ser ignorados\nDividir e conquistar: o propósito de uma classe deve estar bem definido\n\nImplemente várias classes com propósitos diferentes, uma utilizando a outra, se for o caso"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#primeiro-pilar-de-poo-abstração-1",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#primeiro-pilar-de-poo-abstração-1",
    "title": "Classes, Objetos e Abstração",
    "section": "Primeiro pilar de POO: Abstração",
    "text": "Primeiro pilar de POO: Abstração\n\nImagem: The Cat as a Metaphor in OO Software Development"
  },
  {
    "objectID": "slides/03-classes-objetos/03-classes-objetos.html#jupyter-notebook",
    "href": "slides/03-classes-objetos/03-classes-objetos.html#jupyter-notebook",
    "title": "Classes, Objetos e Abstração",
    "section": "Jupyter Notebook",
    "text": "Jupyter Notebook\n03-Classes-Objetos\n\n\n\nECT2504 - Programação Orientada a Objetos"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#relembrando",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#relembrando",
    "title": "Encapsulamento",
    "section": "Relembrando",
    "text": "Relembrando\nClasse: abstração para agrupar objetos comuns\nObjetos: instâncias de uma classe"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#relembrando-1",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#relembrando-1",
    "title": "Encapsulamento",
    "section": "Relembrando",
    "text": "Relembrando\n\nAtributos: características da entidade sendo modelada\nMétodos: definem o comportamento\nInicializador: inicializa os atributos (construtor em outras linguagens)\nself: referência que um objeto tem dele mesmo"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#objetivos",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#objetivos",
    "title": "Encapsulamento",
    "section": "Objetivos",
    "text": "Objetivos\nAula de hoje:\n\nEncapsulamento: segundo pilar de POO\nSetters/getters e como implementá-los em Python"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento",
    "title": "Encapsulamento",
    "section": "Encapsulamento",
    "text": "Encapsulamento\n\nCapacidade de esconder informações (dados) nos objetos\n\n\nAlguns atributos/métodos são usados apenas como parte da lógica da implementação da classe\nEstes atributos/métodos devem ser impedidos de serem utilizados fora da classe\n\nDo contrário, eles podem “quebrar” o estado dos objetos"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento-1",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento-1",
    "title": "Encapsulamento",
    "section": "Encapsulamento",
    "text": "Encapsulamento\n\nAs classes devem expôr o mínimo necessário para serem utilizadas\n\nSimilar a funções: os dados mínimos que elas precisam são os parâmetros e as suas variáveis locais não ficam acessíveis por quem as chama"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#interface-pública-de-uma-classe",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#interface-pública-de-uma-classe",
    "title": "Encapsulamento",
    "section": "Interface Pública de uma Classe",
    "text": "Interface Pública de uma Classe\n\nToda classe tem uma interface pública: conjunto de métodos que devem ser chamados pelos seus objetos\nA interface pública da classe informa ao usuário da classe como ele deve utilizá-la\n\nUsuário da classe é quem utiliza a classe e portanto é um programador\nUsuário da classe não é o mesmo que o usuário do programa (que é uma pessoa que não necessariamente entende de programação)"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento-2",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento-2",
    "title": "Encapsulamento",
    "section": "Encapsulamento",
    "text": "Encapsulamento\n\nOs usuários da classe só podem acessar os atributos e métodos públicos da classe\nAo chamar um método, o usuário da classe pode ignorar como ele foi implementado\n\nBasta que ele saiba o que deve ser passado como parâmetro e qual o retorno do método para chamá-lo\n\nFacilita a manutenção e reaproveitamento do código"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#modificadores-de-acesso",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#modificadores-de-acesso",
    "title": "Encapsulamento",
    "section": "Modificadores de Acesso",
    "text": "Modificadores de Acesso\nOs modificadores de acesso valem para atributos e métodos:\n\nPúblico: o atributo/método pode ser acessado/chamado de dentro ou fora da classe\nPrivado: o atributo/método só pode ser acessado/chamado de dentro da classe; ele não é herdado pelas subclasses\nProtegido: o atributo/método só pode ser acessado/chamado de dentro da classe; ele é herdado pelas subclasses"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#modificadores-de-acesso-1",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#modificadores-de-acesso-1",
    "title": "Encapsulamento",
    "section": "Modificadores de Acesso",
    "text": "Modificadores de Acesso\nA implementação dos modificadores é dependente da linguagem:\n\nC++ e Java usam palavras chave private e public"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#modificadores-de-acesso-2",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#modificadores-de-acesso-2",
    "title": "Encapsulamento",
    "section": "Modificadores de Acesso",
    "text": "Modificadores de Acesso\nExemplo em Java\npublic class Pessoa\n{\n    // Atributos\n    private String nome;\n    private int idade;\n\n    // Método público\n    public void cumprimenta(Pessoa outro)\n    {\n      ...\n    }\n}\nPython não funciona desta forma. Mais sobre isto no notebook da aula."
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento",
    "title": "Encapsulamento",
    "section": "Exemplo: Estacionamento",
    "text": "Exemplo: Estacionamento\nPara motivar a necessidade de encapsulamento, vamos pensar em uma classe para denotar um estacionamento"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento-1",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento-1",
    "title": "Encapsulamento",
    "section": "Exemplo: Estacionamento",
    "text": "Exemplo: Estacionamento\n\nUm estacionamento tem capacidade para um número n > 0 de vagas.\nDevemos controlar quantos carros estão dentro do estacionamento.\nOs carros podem entrar somente se há vagas disponíveis."
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento-2",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento-2",
    "title": "Encapsulamento",
    "section": "Exemplo: Estacionamento",
    "text": "Exemplo: Estacionamento\nNesse sistema podemos identificar:\n\nClasses: Carros e o estacionamento (vamos ignorar os carros neste exemplo)\nAtributos: número de vagas, capacidade máxima\nMétodos: O estacionamento pode registrar uma entrada e uma saída de um carro. Além disso, o estacionamento deve fornecer para usuários da classe o número de vagas disponíveis"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento-3",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento-3",
    "title": "Encapsulamento",
    "section": "Exemplo: Estacionamento",
    "text": "Exemplo: Estacionamento\nPergunta: o usuário da classe Estacionamento deveria modificar diretamente o atributo vagas?\nPara responder, pense na consistência do objeto Estacionamento. Esta consistência pode ser mantida com modificações diretas?"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento-4",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#exemplo-estacionamento-4",
    "title": "Encapsulamento",
    "section": "Exemplo: Estacionamento",
    "text": "Exemplo: Estacionamento\nA resposta é Não!: o valor do atributo vagas não deve ser modificado diretamente.\n\nIsto deve ser feito exclusivamente utilizando chamada aos método que informam que um carro entrou ou saiu do estacionamento. Estes métodos, por sua vez, são quem deve alterar o a quantidade de vagas do estacionamento."
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento-3",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento-3",
    "title": "Encapsulamento",
    "section": "Encapsulamento",
    "text": "Encapsulamento\nUtilizado para:\n\nEsconder os atributos de uma classe\nEsconder como funcionam os métodos da classe\nFacilitar o reaproveitamento de código\nGarantir a consistência (do estado) dos objetos"
  },
  {
    "objectID": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento-em-python",
    "href": "slides/04-encapsulamento/04-encapsulamento.html#encapsulamento-em-python",
    "title": "Encapsulamento",
    "section": "Encapsulamento em Python",
    "text": "Encapsulamento em Python\n04-Encapsulamento\n\n\n\nECT2504 - Programação Orientada a Objetos"
  },
  {
    "objectID": "slides/05-biblioteca-padrao/05-biblioteca-padrao.html#revisão",
    "href": "slides/05-biblioteca-padrao/05-biblioteca-padrao.html#revisão",
    "title": "Biblioteca Padrão Python",
    "section": "Revisão",
    "text": "Revisão\nEncapsulamento\n\nProtege o acesso direto aos atributos de um objeto\nEsconde como funcionam as rotinas (métodos) da classe\nAs classes devem expôr o mínimo necessário para serem utilizadas"
  },
  {
    "objectID": "slides/05-biblioteca-padrao/05-biblioteca-padrao.html#revisão-1",
    "href": "slides/05-biblioteca-padrao/05-biblioteca-padrao.html#revisão-1",
    "title": "Biblioteca Padrão Python",
    "section": "Revisão",
    "text": "Revisão\nEncapsulamento\n\nAo chamar um método, podemos ignorar como ele foi implementado\nOs usuários da classe só devem acessar os atributos/métodos públicos da classe (interface pública)"
  },
  {
    "objectID": "slides/05-biblioteca-padrao/05-biblioteca-padrao.html#biblioteca-padrão",
    "href": "slides/05-biblioteca-padrao/05-biblioteca-padrao.html#biblioteca-padrão",
    "title": "Biblioteca Padrão Python",
    "section": "Biblioteca Padrão",
    "text": "Biblioteca Padrão\nÉ comum que as linguagens orientadas a objeto forneçam uma biblioteca padrão (standard library):\n\nFornecem classes para auxiliar o programador\nEstas classes possuem uma interface pública (conjunto de métodos) bem definida"
  },
  {
    "objectID": "slides/05-biblioteca-padrao/05-biblioteca-padrao.html#objetivos",
    "href": "slides/05-biblioteca-padrao/05-biblioteca-padrao.html#objetivos",
    "title": "Biblioteca Padrão Python",
    "section": "Objetivos",
    "text": "Objetivos\nNesta aula, serão mostradas as seguintes classes da biblioteca padrão de Python:\n\ntuple (pares ordenados, tuplas, etc)\nlist (listas de elementos)\nstr (strings)\ndict (dicionários)"
  },
  {
    "objectID": "slides/05-biblioteca-padrao/05-biblioteca-padrao.html#estruturas-de-dados-e-biblioteca-padrão",
    "href": "slides/05-biblioteca-padrao/05-biblioteca-padrao.html#estruturas-de-dados-e-biblioteca-padrão",
    "title": "Biblioteca Padrão Python",
    "section": "Estruturas de Dados e Biblioteca Padrão",
    "text": "Estruturas de Dados e Biblioteca Padrão\n05-Biblioteca-Padrão\n\n\n\nECT2504 - Programação Orientada a Objetos"
  }
]